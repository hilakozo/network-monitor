void printPairs(int[] array) {
    for (int i = 0; i < array.length; i++) {
        for (int j = 0; j < array.length; j++) {
            System.out.println(array[i] + "," + array[j]);
        }
    }
}
 הפונקציה מבצעת את כל הקומבבינציות האפשריות עבור הערכים שיכולים להיות בתוך מערך נתון.
לצורך הדוגמא , נניח כי קיים מערך A[] וקיימים בו הערכים הבאים: A[1,2,3]
1,1
1,2
1,3
2,1
2,2
2,3
3,1
3,2
3,3

סיבוכיות הפונקציה היא O(N*2), כאשר n  הוא מספר האברים בבמערך, ומכיוון שיש לנו לולאה מקוננת ניתן  להגיד כי כל לולאה עוברת על n הערכים.


void printPairs2(int[] arrayA, int[] array B) {
    for (int i = 0; i < arrayA.length; i++) {
        for (int j = 0; j < arrayB.length; j++) {
            System.out.println(arrayA[i] + "," + arrayB[j]);
        }
what this funcction do and what the complex
    }
}

הפונקציה הזו מבצעת בדיוק את אותה פעולה כמו  הפונקציה בשאלה שלוש, והשוני בניהם הוא זמן הסיבוכיות.
בפונקציה זו זמן הסיבוכיות הוא O)m*n( כיוון שבלולאה הראשונה הפונקציה עוברת על אברי מעררך A (ולצורך העניין הם יסומנו בN )ובלולאה השנייה היא עוברת על אבברי מערך B (יסומנו בm (
הבדל זה יכול להשפיע בזמן הריצה של הפונקציות, זמן הריצה של הפונקציה הראשונה היא ריבועית, ולכן ככל שהמערך גדל , זמן הריצה גדל ממש.
בפונקציה השנייה, זה תלוי בגודל של שני מערכים ולכן מאפשר זמן ריצה מבוקר יותר אם אחד מהמערכים קטן יותר 

